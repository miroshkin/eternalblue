
@using Microsoft.EntityFrameworkCore
@using EternalBlue.Ifs
@using System.Reflection.Metadata.Ecma335
@using EternalBlue.Data
@using Newtonsoft.Json
@inject IEncryptor _encryptor
@model CandidatesPageViewModel

@{
    ViewData["Title"] = "Candidates Page";
}

<form method="post" enctype="multipart/form-data" asp-controller="Candidates" asp-action="Index">
    <div class="text-center">
        @if (TempData["SuccessMessage"] != null)
        {
        <div class="alert alert-success alert-dismissible fade show" role="alert">@TempData["SuccessMessage"].ToString()
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">@TempData["ErrorMessage"].ToString()
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        }
        @if (!Model.ShowApprovedCandidatesOnly)
        {
            <div class="row d-flex justify-content-start align-items-end">
                <div class="form-group col-3">
                    @Html.LabelFor(model => model.Technology, "Technology")
                    @Html.DropDownListFor(model => model.Technology, Model.Technologies, new { @class = "form-control" })
                </div>
                <div class="form-group col-3">
                    @Html.LabelFor(model => model.YearsOfExperience, "Years of experience")
                    @Html.DropDownListFor(model => model.YearsOfExperience, Model.YearsOfExperience, new { @class = "form-control" })
                </div>
                <div class="form-group col-3">
                    <input class="btn btn-primary w-100" type="submit" value="Search" />
                </div>
                <div class="form-group col-3">
                    <div class="mb-2">Selected: @Model.Candidates.Count candidate(s)</div>
                </div>
            </div>
        }

        @foreach (var item in Model.Candidates.Select((value, i) => (value, i)))
        {
            @if ((item.i) % 4 == 0)
            {@Html.Raw("<div class=\"row card-group\">")
        }
            <div class="card col-3" style="width: 18rem;">
                <img class="card-img-top" src=@item.value.ProfilePicture alt=@item.value.FullName>
                <div class="card-body d-flex flex-column">
                    <h5 class="card-title">@item.value.FullName</h5>
                    <p class="card-text">@item.value.Email</p>
                    <div>
                        @foreach (var skill in item.value.Experience.OrderByDescending(s => s.YearsOfExperience))
                        {
                            <div class="text-left">@skill.TechnologyName - @skill.YearsOfExperience year(s)</div>
                        }
                    </div>

                    @if (!Model.ShowApprovedCandidatesOnly)
                    {
                        <div class="row mt-auto">
                            <a class="btn btn-success align-self-end w-50 mt-3" href='@Url.Action("Confirm", "Candidates", new {FullName = @item.value.FullName, Status = CandidateStatus.Approved, CandidateInfo = _encryptor.Encrypt(JsonConvert.SerializeObject(@item.value))})'>Approve</a>
                            <a class="btn btn-danger align-self-end w-50" href='@Url.Action("Confirm", "Candidates", new {FullName = @item.value.FullName, Status = CandidateStatus.Rejected, CandidateInfo = _encryptor.Encrypt(JsonConvert.SerializeObject(@item.value))})'>Reject</a>
                        </div>
                    }
                </div>
            </div>
            @if ((item.i) % 4 == 3)
            {@Html.Raw("</div>")
        }
        }
        @if (Model.Candidates.Count % 4 != 0)
        {@Html.Raw("</div>")}

    </div>
</form>